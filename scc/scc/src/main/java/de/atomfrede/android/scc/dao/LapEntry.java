package de.atomfrede.android.scc.dao;

import de.atomfrede.android.scc.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LAP_ENTRY.
 */
public class LapEntry {

    private long lapId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LapEntryDao myDao;

    private Lap lap;
    private Long lap__resolvedKey;


    public LapEntry() {
    }

    public LapEntry(long lapId) {
        this.lapId = lapId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLapEntryDao() : null;
    }

    public long getLapId() {
        return lapId;
    }

    public void setLapId(long lapId) {
        this.lapId = lapId;
    }

    /** To-one relationship, resolved on first access. */
    public Lap getLap() {
        if (lap__resolvedKey == null || !lap__resolvedKey.equals(lapId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LapDao targetDao = daoSession.getLapDao();
            lap = targetDao.load(lapId);
            lap__resolvedKey = lapId;
        }
        return lap;
    }

    public void setLap(Lap lap) {
        if (lap == null) {
            throw new DaoException("To-one property 'lapId' has not-null constraint; cannot set to-one to null");
        }
        this.lap = lap;
        lapId = lap.getId();
        lap__resolvedKey = lapId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
