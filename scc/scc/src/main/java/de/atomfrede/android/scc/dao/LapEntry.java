/*
*	 SCC - The Sprintercup Companion App provides you with the Meldeergbnis right on your smartphone
*    
*    Copyright (C) 2012  Frederik Hahne <atomfrede@gmail.com>
*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package de.atomfrede.android.scc.dao;

import de.atomfrede.android.scc.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LAP_ENTRY.
 */
public class LapEntry {

    private long lapId;
    private String firstname;
    private String lastname;
    private String year;
    private String club;
    private String time;
    private Integer competitionNumber;
    private Integer lapNumber;
    private Integer lane;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LapEntryDao myDao;

    private Lap lap;
    private Long lap__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LapEntry() {
    }

    public LapEntry(long lapId, String firstname, String lastname, String year, String club, String time, Integer competitionNumber, Integer lapNumber, Integer lane) {
        this.lapId = lapId;
        this.firstname = firstname;
        this.lastname = lastname;
        this.year = year;
        this.club = club;
        this.time = time;
        this.competitionNumber = competitionNumber;
        this.lapNumber = lapNumber;
        this.lane = lane;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLapEntryDao() : null;
    }

    public long getLapId() {
        return lapId;
    }

    public void setLapId(long lapId) {
        this.lapId = lapId;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public String getClub() {
        return club;
    }

    public void setClub(String club) {
        this.club = club;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public Integer getCompetitionNumber() {
        return competitionNumber;
    }

    public void setCompetitionNumber(Integer competitionNumber) {
        this.competitionNumber = competitionNumber;
    }

    public Integer getLapNumber() {
        return lapNumber;
    }

    public void setLapNumber(Integer lapNumber) {
        this.lapNumber = lapNumber;
    }

    public Integer getLane() {
        return lane;
    }

    public void setLane(Integer lane) {
        this.lane = lane;
    }

    /** To-one relationship, resolved on first access. */
    public Lap getLap() {
        if (lap__resolvedKey == null || !lap__resolvedKey.equals(lapId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LapDao targetDao = daoSession.getLapDao();
            lap = targetDao.load(lapId);
            lap__resolvedKey = lapId;
        }
        return lap;
    }

    public void setLap(Lap lap) {
        if (lap == null) {
            throw new DaoException("To-one property 'lapId' has not-null constraint; cannot set to-one to null");
        }
        this.lap = lap;
        lapId = lap.getId();
        lap__resolvedKey = lapId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public String toString(){
    	StringBuilder sb = new StringBuilder();
    	sb.append("Lane "+lane);
    	sb.append("\n"+firstname+" "+lastname);
    	sb.append("\n"+year+" "+club);
    	sb.append("\n"+time);
    	return sb.toString();
    }
    // KEEP METHODS END

}
