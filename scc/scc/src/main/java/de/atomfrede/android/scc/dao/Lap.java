package de.atomfrede.android.scc.dao;

import java.util.List;
import de.atomfrede.android.scc.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LAP.
 */
public class Lap {

    private Integer lapNumber;
    private Long id;
    private long competitionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LapDao myDao;

    private Competition competition;
    private Long competition__resolvedKey;

    private List<LapEntry> lapEntryList;

    public Lap() {
    }

    public Lap(Long id) {
        this.id = id;
    }

    public Lap(Integer lapNumber, Long id, long competitionId) {
        this.lapNumber = lapNumber;
        this.id = id;
        this.competitionId = competitionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLapDao() : null;
    }

    public Integer getLapNumber() {
        return lapNumber;
    }

    public void setLapNumber(Integer lapNumber) {
        this.lapNumber = lapNumber;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getCompetitionId() {
        return competitionId;
    }

    public void setCompetitionId(long competitionId) {
        this.competitionId = competitionId;
    }

    /** To-one relationship, resolved on first access. */
    public Competition getCompetition() {
        if (competition__resolvedKey == null || !competition__resolvedKey.equals(competitionId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CompetitionDao targetDao = daoSession.getCompetitionDao();
            competition = targetDao.load(competitionId);
            competition__resolvedKey = competitionId;
        }
        return competition;
    }

    public void setCompetition(Competition competition) {
        if (competition == null) {
            throw new DaoException("To-one property 'competitionId' has not-null constraint; cannot set to-one to null");
        }
        this.competition = competition;
        competitionId = competition.getId();
        competition__resolvedKey = competitionId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<LapEntry> getLapEntryList() {
        if (lapEntryList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LapEntryDao targetDao = daoSession.getLapEntryDao();
            lapEntryList = targetDao._queryLap_LapEntryList(id);
        }
        return lapEntryList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLapEntryList() {
        lapEntryList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
